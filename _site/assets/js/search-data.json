{"0": {
    "doc": "Home",
    "title": "Introduction",
    "content": "NK-AI 서버연동에 필요한 API 문서입니다. ",
    "url": "http://localhost:4000/#introduction",
    "relUrl": "/#introduction"
  },"1": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"2": {
    "doc": "채널",
    "title": "채널",
    "content": "# 채널 채널에 대한 API입니다. 채널은 1개의 비디오에 대한 정보이며, 영상분석을 수행하는 단위입니다. __목차__ - [채널 등록하기](#채널-등록하기) - [채널 보기](#채널-보기) - [채널 목록보기](#채널-목록보기) - [채널 수정하기](#채널-수정하기) - [채널 삭제하기](#채널-삭제하기) - [카메라 캘리브레이션](#카메라-캘리브레이션) - [스냅샷](#스냅샷) ------------------------ ## 채널 등록하기 비디오 분석을 수행할 채널을 등록합니다. ``` POST /v2/va/register-channel ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | nodeId | String | 컴퓨팅 노드 ID | O | channelName | String | 채널 별칭 | X | inputUri | String | 입력 비디오 URI (RTSP 주소 또는 로컬파일 경로) | O | inputType | String | 입력 비디오 타입 ([InputType](models#inputtype)) | X | siblings | String[] | 연결된 채널 id 목록 | X | ### Response | Name | Type | Description | :---- | :---- |:---- | channelId | String | 채널 ID | code | int | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | string | 오류 메시지 | ### Remarks #### nodeId 채널의 입력 영상에 대해 비디오 분석을 수행 할 컴퓨팅 노드의 ID 입니다. 비디오 분석을 수행하기 위해서는 최소 1개의 컴퓨팅 노드가 필요합니다. #### siblings 동일한 목표지점을 촬영하는 채널인 경우, sibling 관계가 될 수 있습니다. 예를 들어, 같은 위치에서 같은 목표지점을 촬영하도록 일반카메라와 열화상카메라 CCTV가 각각 설치 된 경우입니다. 이 때, 두 CCTV 영상들의 분석결과는 서로 상관관계가 있으므로, 이것을 응용 앱에서 활용하기 위해 본 파라메터를 이용하여 sibling 관계를 관리할 수 있습니다. ### Sample #### Request ``` POST /v2/va/register-channel { \"nodeId\": \"a9fjaLsT\", \"channelName\": \"CCTV on front door\", \"inputUri\": \"rtsp://admin:password@192.168.0.100:554/live\", \"inputType\": \"SRC_IPCAM_NORMAL\", \"siblings\": [] } ``` #### Response ``` # 성공 { \"channelId\": \"X1ashF0t\", \"code\": 0, } ``` ``` # 실패 { \"channelId\": \"X1ashF0t\", \"code\": 3, \"message\": \"Authentication failed\" } ``` ## 채널 보기 채널의 상세 정보를 조회합니다. ``` POST /v2/va/get-channel ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | channel | JsonObject | 채널 정보 ([Channel Model](/docs/models/#channel-model)) | code | Integer | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | ### Sample #### Requset ``` POST /v2/va/get-channel { \"channelId\": \"X1ashF0t\" } ``` ### Response ``` # 성공 { \"channel\": { \"channelId\": \"X1ashF0t\", \"nodeId\": \"a9fjaLsT\", \"inputUri\" : \"rtsp://admin:password@192.168.0.100:554/live\", \"channelName\": \"CCTV on front door\", \"inputDeviceType\": \"SRC_IPCAM_NORMAL\", \"sibilngs\" : [\"\",\"\"] \"status\": \"CH_STATUS_NORMAL\" }, \"code\": 0 } ``` ``` # 실패 { \"code\" : 1 \"message\" : \"ChannelId (X1ashF0t) not exists\" } ``` ## 채널 목록보기 전체 채널 상세정보를 조회합니다. ``` POST /v2/va/list-channels ``` ### Response [Channel Model](/docs/models/#channel-model)의 배열을 반환합니다. ### Sample #### Requset ``` POST /v2/va/list-channels {} ``` ### Response ``` { \"channels\": [{ \"channelId\": \"X1ashF0t\", \"nodeId\": \"a9fjaLsT\", \"inputUri\" : \"rtsp://admin:password@192.168.0.100:554/live\", \"channelName\": \"CCTV on front door\", \"inputDeviceType\": \"SRC_IPCAM_NORMAL\", \"sibilngs\" : [\"\",\"\"] \"status\": \"CH_STATUS_NORMAL\" }, { \"channelId\": \"X1ashF0t2\", \"nodeId\": \"a9fjaLsT2\", \"inputUri\" : \"rtsp://admin:password@192.168.0.100:554/live\", \"channelName\": \"CCTV on back door\", \"inputDeviceType\": \"SRC_IPCAM_NORMAL\", \"sibilngs\" : [\"\",\"\"] \"status\": \"CH_STATUS_INPUT_DEVICE_CONNECTION_LOST\" }] } ``` ## 채널 수정하기 채널의 정보를 수정합니다. ``` POST /v2/va/update-channel ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | nodeId | String | 컴퓨팅 노드 ID | X | inputUri | String | 입력 비디오 URI(RTSP 주소 또는 로컬파일 경로) | X | channelName | String | 채널 별칭 | X | ### Response | Name | Type | Description | :---- | :---- |:---- | code | Integer | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | ### Sample #### Requset ``` POST /v2/va/update-channel { \"channelId\": \"X1ashF0t\", \"channelName\": \"Home CCTV\", } ``` #### Response ``` # 성공 { \"code\": 0 } ``` ``` # 실패 { \"code\" : -1 \"message\" : \"Not Exist ChannelId\" } ``` ## 채널 삭제하기 채널의 정보를 삭제합니다. ``` POST /v2/va/remove-channel ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | code | Integer | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | ### Remarks 비디오 분석이 실행 중인 채널은 삭제할 수 없으며, 삭제하려면 먼저 분석 실행을 중단해야 합니다. ### Sample #### Request ``` POST /v2/va/remove-channel { \"channelId\": \"X1ashF0t\" } ``` #### Response ``` # 성공 { \"code\" : 0 } ``` ``` # 실패 { \"code\" : 5 \"message\" : \"stop analyzing first\" } ``` ## 카메라 캘리브레이션 ``` POST /v2/va/callibrate ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | distortionPoints | JsonObject | 왜곡 보정을 위한 동일한 직선 위의 3점의 영상 좌표 ([DistortionPoint](models#distortion-point))| O | calibrationPoints | JsonObject | 왜곡 보정을 위한 동일한 직선 위의 3점의 영상 좌표 ([CalibrationPoint](models#calibration-point)) | O | ### Response | Name | Type | Description | :---- | :---- |:---- | channelId | String | 채널 ID | code | Integer | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | #### Sample JSON #### Requset ``` POST /v2/va/callibrate { \"channelId\": \"X1ashF0t\", \"distortionPoints\": { \"startPoint\" : [0.3, 0.4], \"middlePoint\": [0.3, 0.4], \"endPoint\": [0.3, 0.4] }, \"calibrationPoints\": { \"verticalPoint1\" : [0.3, 0.4], \"verticalPoint2\" : [0.3, 0.4], \"horizontalPoint1\" : [0.3, 0.4], \"horizontalPoint2\" : [0.3, 0.4] } } ``` #### Response ``` # 성공 { \"code\" : 0 } # 오류 { \"code\": 6, \"message\": \"Channel X1ashF0t not exists\" } ``` ## 스냅샷 채널의 영상 스냅샷을 반환합니다. ``` POST /v2/va/snapshot ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | imageData | String | 카메라 스틸컷 데이터 (jpeg -> base64인코딩) | code | Integer | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | #### Sample JSON #### Requset ``` POST /v2/va/snapshot { \"channelId\": \"X1ashF0t\" } ``` #### Response ``` # 성공 { \"imageData\" : \"x35hj34Bd239....\" \"code\" : 0 } # 오류 { \"code\": 1, \"message\": \"Channel X1ashF0t not exists\" } ``` ",
    "url": "http://localhost:4000/docs/channels/",
    "relUrl": "/docs/channels/"
  },"3": {
    "doc": "컴퓨팅 노드",
    "title": "컴퓨팅 노드",
    "content": "# 컴퓨팅 노드 비디오 분석을 수행할 컴퓨팅 노드를 관리하는 API입니다. 컴퓨팅 노드는 실행 중인 NK-AI 서버(프로세스)입니다. ## 컴퓨팅 노드 등록하기 ``` POST /v2/va/create-computing-node ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | host | String | 호스트 | O | httpPort | Integer | HTTP 포트번호 | O | rpcPort | Integer | RPC 포트번호 | O | nodeName | String | 노드 닉네임 | X | ### Response | Name | Type | Description | :---- | :---- |:---- | nodeId | String |노드 ID | ## 컴퓨팅 노드 조회하기 ``` POST /v2/va/get-computing-node ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | nodeId | String |노드 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | nodeId | String | 노드 ID | host | String | 호스트 | httpPort | Integer | HTTP 포트번호 | rpcPort | Integer | RPC 포트번호 | nodeName | String | 노드 닉네임 | productCode | String | 제품 코드 | productVersion | String | 제품 버전 | description | String | 제품 설명 | licenseValidity | Bool | 라이센스 유효 여부 | licenseExpired | String | 라이센스 만료일(YYYY-MM-DD) | features | [EventType](/docs/models/#eventtype) | 현재 라이센스에서 사용 가능한 이벤트타입 목록 | ## 컴퓨팅 노드 목록 조회하기 모든 컴퓨팅 노드를 조회합니다. ``` POST /v2/va/list-computing-node ``` ### Response [컴퓨팅 노드 조회하기](#컴퓨팅-노드-조회하기)와 동일한 응답이 배열로 반환 됩니다. ## 컴퓨팅 노드 수정하기 ``` POST /v2/va/update-computing-node ``` ### Request | Name | Type | Description | :---- | :---- |:---- | nodeId | String | 노드 ID | host | String | 호스트 | httpPort | Integer | HTTP 포트번호 | rpcPort | Integer | RPC 포트번호 | nodeName | String | 노드 닉네임 | ### Response | Name | Type | Description | :---- | :---- |:---- | nodeId | String |노드 ID | ## 컴퓨팅 노드 삭제하기 ``` POST /v2/va/remove-computing-node ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | nodeId | String |노드 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | nodeId | String |노드 ID | ",
    "url": "http://localhost:4000/docs/computing_node/",
    "relUrl": "/docs/computing_node/"
  },"4": {
    "doc": "모델",
    "title": "모델",
    "content": "# 모델 REST API에서 사용 되는 내부 클래스와 Enum 구조들입니다. ------------------------ ### Channel Model | Name | Type | Description | :---- | :---- |:---- | channelId | String | 채널 ID | nodeId | String | 컴퓨팅 노드 ID | inputUri | String | 입력 비디오 URI(RTSP 주소 또는 로컬파일 경로) | channelName | String | 채널 별칭 | inputDeviceType | enum([InputType](/docs/models/#inputtype)) | 입력장치 타입| siblings | [String] | 연결된 채널 id 목록 | status | enum([ChannelStatus](#channelstatus)) | 채널 상태 | ### ChannelStatus | Enum | Description | :---- | :---- | CH_STATUS_NORMAL | 정상 | CH_STATUS_INPUT_DEVICE_CONNECTION_LOST | 입력장치 연결 끊김 | ### Distortion Point | Name | Type | Description | Required | :---- | :---- |:---- |:---- | startPoint | [Double] | 첫 번째 점의 X, Y 좌표 비율 (0 ~ 1)| O | middlePoint | [Double] | 중간 점의 X, Y 좌표 비율 (0 ~ 1)| O | endPoint | [Double] | 마지막 점의 X, Y 좌표 비율 (0 ~ 1)| O | ### Calibration Point | Name | Type | Description | Required | :---- | :---- |:---- |:---- | verticalPoint1 | [Double] | 세로로 된 직선 1의 시작, 끝 X, Y 좌표 비율 (0 ~ 1)| O | verticalPoint2 | [Double] | 세로로 된 직선 2의 시작, 끝 X, Y 좌표 비율 (0 ~ 1)| O | horizontalPoint1 | [Double] | 가로로 된 직선 1의 시작, 끝 X, Y 좌표 비율 (0 ~ 1)| O | horizontalPoint2 | [Double] | 가로로 된 직선 2의 시작, 끝 X, Y 좌표 비율 (0 ~ 1)| O | ### EventType | Enum | Description | :---- | :---- | EVT_LOITERING | 배회 | EVT_INTRUSION | 침입 | EVT_QUEUEING | 대기열 | EVT_ABNORMAL_CONGESTION | 영역 ROI 내 이동흐름 정체 (정상흐름 대비 상대적 정체도) | EVT_ABNORMAL_OBJ_COUNT | 영역 ROI 내 개체밀집 (정의된 개체수 이상의 객체 존재) | EVT_ROI_COUNT | 영역 ROI 카운팅 | EVT_LINE_COUNT | ROI 카운팅 | EVT_ILLEGAL_PARKING | 불법 주정차 | EVT_WRONG_WAY | 역주행 | EVT_DIRECTION_COUNTING | 방향성 이동(직전, 좌/우회전, 유턴) 카운팅 | EVT_VEHICLE_SPEED | 차량 속도 | EVT_VEHICLE_DENSITY | 차량 밀도 | EVT_STOP_VEHICLE_COUNTING | 정지 차량 카운팅 | EVT_SIGNAL_WAITING_TIME | 신호 대기 시간 | EVT_PARKING_SPACE | 주차공간 점유 여부 검출 | EVT_TRAFFIC_ACTUATED_SIGNAL | 교통 감응신호 (rs232 통신으로 옵션보드로 차량 유무 신호 전송) | EVT_CROSSWALK_QUEUEING | 횡단보도 대기열 카운팅 | ### InputType | Enum | Description | :---- | :---- | SRC_IPCAM_NORMAL | 일반 카메라 (Default) 영상 | SRC_IPCAM_THERMAL | 열화상 카메라 영상 | SRC_IPCAM_DEPTH | 깊이센서 카메라 영상 | SRC_ETC | 기타 영상 | ### RecentCrashLogs | Name | Type | Description | :---- | :---- |:---- | nodeId | String | 컴퓨팅 노드 ID | crashTime | String | 비정상 종료 시각 | ### error code | Value | Description | :---- | :---- | 0 | 성공 | 1 | 등록되지 않은 채널 | 2 | RTSP 포멧이 정확하지 않음 | 3 | 카메라 접근 계정 인증 오류 | 4 | 카메라에 연결 할 수 없음 | 5 | 분석 실행 중 | 6 | 캘리브레이션 실패 | 7 | 스냅샷 생성 실패 | 8 | 노드에 연결 할 수 없음 | 9 | 노드가 이미 있음 | ",
    "url": "http://localhost:4000/docs/models/",
    "relUrl": "/docs/models/"
  },"5": {
    "doc": "시스템",
    "title": "시스템",
    "content": "# 시스템 시스템 상태를 조회하는 API입니다. ## 시스템 상태 조회 시스템에 이상이 없는지 조회합니다. 이 API를 주기적으로 호출하여 서버의 상태를 체크하십시오. ``` POST /v2/va/get-system-status ``` ### Response 아래 표시 된 노드 상태정보를 배열로 응답합니다. | Name | Type | Description | :---- | :---- |:---- | nodeId | String | 컴퓨팅 노드 ID | version | [Version](#version) | 버전 정보 | channelsInVaRunning | Integer | 비디오 분석이 실행 중인 채널 개수 | systemWarnings | [SystemWarnings](#systemwarnings) | 오류 상태 목록 | channelsInWarning | [Channel](/docs/models/#channel-model) | 경고 상태인 채널들의 정보 | performance | [Performance](#performance) | 시스템 사용률 | code | int | 오류 코드 ([Error Code](/docs/models/#error-code)) | message | String | 오류 메시지 | recentCrashLogs | [RecentCrashLogs](/docs/models/#recentcrashlogs) | 최근 24시간 내 비정상 종료 된 컴퓨팅 노드 기록정보 | #### JSON sample ### Request ``` POST /v2/va/get-system-status {} ``` ### Response ``` # 성공 { \"systems\":[{ \"nodeId\": \"vgj3d0Aj\", \"version\" :{ \"software\" : \"1.0.0\", \"firmware\" : \"Windows 10 Build 19042.1165\", \"gpuModel\" : \"RTX 2060\", \"gpuVersion\" : \"462.75\", \"detectorModel\": { \"face\" : \"1.0.0\", \"human\" : \"1.1.0\" } }, \"channelsInVaRunning\": 2, \"systemWarnings\": [], \"channelsInWarning\": [], \"performance\" :{ \"cpuUsage\": 63.2, \"gpuUsage\": 81.1, \"memoryUsage\": 42.0, \"diskUsage\": 4.8 }, \"code\" : 0 }, { \"nodeId\": \"Boa9dl19\", \"version\" :{ \"software\" : \"1.1.0\", \"firmware\" : \"ubuntu linux 30.2.1\", \"gpuModel\" : \"RTX 3060\", \"gpuVersion\" : \"462.75\", \"detectorModel\": { \"face\" : \"1.0.0\", \"human\" : \"1.1.0\" } }, \"channelsInVaRunning\": 1, \"systemWarnings\": [], \"channelsInWarning\": [], \"performance\" :{ \"cpuUsage\": 63.2, \"gpuUsage\": 81.1, \"memoryUsage\": 42.0, \"diskUsage\": 4.8 }, \"code\" : 0 }] } ``` ``` # 실패 { \"systems\":[ \"nodeId\": \"Boa9dl0\", \"code\": 8, \"message\": \"can not connect node Boa9dl0\" }, { \"nodeId\": \"Boa9dl19\", \"version\" :{ \"software\" : \"1.1.0\", \"firmware\" : \"ubuntu linux 30.2.1\", \"gpuModel\" : \"RTX 3060\", \"gpuVersion\" : \"462.75\" }, \"channelsInVaRunning\": 1, \"systemWarnings\": [], \"channelsInWarning\": [], \"performance\" :{ \"cpuUsage\": 63.2, \"gpuUsage\": 81.1, \"memoryUsage\": 42.0, \"diskUsage\": 4.8 } }] } ``` ## SystemWarnings | Enum | Description | :---- | :---- | SYS_RESOURCE_FULL | 시스템 리소스 한계 사용 중 | SYS_UNSTABLE_NETWORK | 네트워크 불안정 | SYS_NO_LICENSE | 라이센스 없음 | SYS_LICENSE_EXPIRED | 라이센스 만료 | ## Performance | Name | Type | Description | :---- | :---- |:---- | cpuUsage | Double | CPU 사용률 | gpuUsage | Double | GPU 사용률 | memoryUsage | Double | Memory 사용률 | diskUsage | Double | Disk 사용률 | ## Version | Name | Type | Description | :---- | :---- |:---- | software | String | NK 프로그램 버전 | detectorModel | Dynaimc Dictionary | model version | firmware | String | 펌웨어 버전 (OS) | gpuModel | String | GPU 모델 | gpuVersion | String | GPU 버전 | ",
    "url": "http://localhost:4000/docs/system/",
    "relUrl": "/docs/system/"
  },"6": {
    "doc": "비디오 분석 설정",
    "title": "비디오 분석 설정",
    "content": "# 비디오 분석 설정 비디오 분석 설정에 대한 API입니다. __목차__ - [비디오 분석 제어](#비디오-분석-제어) - [ROI 생성](#roi-생성) - [ROI 조회](#roi-조회) - [채널 내 ROI 목록 조회](#채널-내-roi-목록-조회) - [ROI 수정](#roi-수정) - [ROI 삭제](#roi-삭제) - [AnalysisConfigs](#analysisconfigs) ------------------------ # 비디오 분석 제어 이 API를 이용하여 지정 채널에 대해 비디오 분석을 시작하거나 중지할 수 있습니다. 또한, ROI 영역의 검출객체 카운팅 상태들을 초기화할 수 있습니다. ``` POST /v2/va/control ``` #### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | String | 채널 ID | O | operation | [[Operations](#enum-operations)] | 제어 명령 | O | #### Enum Operations | Enum | Description | :---- | :---- | VA_START | 분석 시작 | VA_STOP | 분석 중지 | VA_RST | 분석 초기화 | ROI_RST_COUNT | 카운트 초기화 | # ROI 설정 ROI(Region of interest; 관심영역)은 비디오 분석을 실행할 화면 내 영역이며, 분석 종류에 따라 선 또는 폴리곤 형태가 필요합니다. 한 개 채널에 여러 개의 ROI가 존재할 수 있습니다. ## ROI 생성 지정한 채널에 대해 관심 영역을 정의하고, 관심 영역 내 분석 알고리즘을 설정합니다. ``` POST /v2/va/create-roi ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | string | 채널 ID | O | description | string | 관심 영역 설명 | X | roiDots | [Integer] | 관심 영역 좌표 | O | analysisConfigs | object ([AnalysisConfig](#analysisconfigs)) | 분석 알고리즘 설정 | X | #### JSON sample ``` { \"channelId\": \"X1ashF0t\", \"description\": \"Loitering and intrusion detection for CCTV #3\", \"roiDots\": [0.2, 0.2, 0, 0.5, 0.7, 0.1], \"analysisConfigs\": { \"loiteringConfig\": { abnormalStayTime: 1.0, abnormalCi: 1.0 }, \"intrusionConfig\": { abnormalStayTime: 1.0, abnormalCi: 1.0 } } } ``` ### Response | Name | Type | Description | :---- | :---- |:---- | roiId | String | 관심 영역 ID | #### JSON sample ``` { \"roiId\": \"Vif7f02j\" } ``` ## ROI 조회 ROI를 조회합니다. ``` POST /v2/va/get-roi ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | roiId | string | 관심 영역 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | roiId | String | 관심 영역 ID | channelId | string | 채널 ID | description | string | 관심 영역 설명 | roiDots | [Integer] | 관심 영역 좌표 | analysisConfigs | object ([AnalysisConfig](#analysisconfigs)) | 분석 알고리즘 설정 | #### JSON sample ``` { \"roiId\": \"Vif7f02j\", \"channelId\": \"X1ashF0t\", \"description\": \"Loitering and intrusion detection for CCTV #3\", \"roiDots\" : [0.2, 0.2, 0, 0.5, 0.7, 0.1], \"analysisConfigs\": { \"loiteringConfig\": { abnormalStayTime: 1.0, abnormalCi: 1.0 }, \"intrusionConfig\": { abnormalStayTime: 1.0, abnormalCi: 1.0 } } } ``` ## 채널 내 ROI 목록 조회 지정한 채널에 추가 된 모든 ROI들을 조회합니다. ``` POST /v2/va/list-roi ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | channelId | string | 채널 ID | O | ### Response [ROI 조회](roi-조회) 응답의 배열입니다. ## ROI 수정 ROI 설정을 수정합니다. ``` POST /v2/va/update-roi ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | roiId | string | 관심 영역 ID | O | channelId | string | 채널 ID | X | description | string | 관심 영역 설명 | X | roiDots | [Integer] | 관심 영역 좌표 | X | analysisConfigs | object ([AnalysisConfig](#analysisconfigs)) | 분석 알고리즘 설정 | X | ### Response | Name | Type | Description | :---- | :---- |:---- | roiId | String | 관심 영역 ID | ## ROI 삭제 ROI 설정을 삭제합니다. ``` POST /v2/va/remove-roi ``` ### Request | Name | Type | Description | Required | :---- | :---- |:---- |:---- | roiId | string | 채널 ID | O | ### Response | Name | Type | Description | :---- | :---- |:---- | roiId | String | 관심 영역 ID | ---------------- # AnalysisConfigs #### JSON 표현 ``` { \"loiteringConfig\": { abnormalStayTime: 1.0, abnormalCi: 1.0 } } ``` | Name | Type | Description | Required | :---- | :---- |:---- |:---- | loiteringConfig | object (LoiteringConfig) | 배회 감지 설정 | X | ## 일반 분석 설정 ### LoiteringConfig 영역 내 객체를 감지합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | AlarmTime | Double | 발생 대기 시간 | O | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | X | ### IntrusionConfig 영역 외부에서 내부로 들어오는 객체를 감지합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | AlarmTime | Double | 발생 대기 시간 | O | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | ### FalldownConfig 영역 내 쓰러진 사람을 감지합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | AlarmTime | Double | 발생 대기 시간 | O | ### AbandonedConfig 영역 내 버려진 유기물을 감지합니다. * 유기물 (가방, 쓰레기) | Name | Type | Description | Required | :---- | :---- |:---- |:---- | AlarmTime | Double | 발생 대기 시간 | O | ### CongestionConfig 영역 내 혼잡도를 감지합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | MaxNumberOf | Integer | 객체 개수 제한 | X | ### LineCrossingConfig 라인을 통과하는 객체들을 카운팅합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | Direction | [Direction](#direction) | 방향 선택 | O | ### DoubleLineCrossingConfig 두 라인을 통과하는 객체들을 카운팅합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | ### SpeedConfig 두 라인을 통과하는 객체들을 카운팅합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | Distance | Integer | 두 라인 간 실제 거리 | O | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | ### StopConfig 영역 내 정지된 객체를 감지합니다. | Name | Type | Description | Required | :---- | :---- |:---- |:---- | AlarmTime | Double | 발생 대기 시간 | O | ObjectTypes | [[ObjectType](#objecttype)] | 검출 객체 종류 | O | # ObjectType | Enum | Description | :---- | :---- | PERSON | 사람 | CAR | 일반 차량 | MOTOCYCLE | 오토바이 | BUS | 대형 버스 | TRUCK | 트럭 | FLAME | 불꽃 | SMOKE | 연기 | # Direction | Enum | Description | :---- | :---- | ONE_WAY | 단방향 | TWO_WAY | 양방향 | ",
    "url": "http://localhost:4000/docs/va_control/",
    "relUrl": "/docs/va_control/"
  },"7": {
    "doc": "비디오 분석 결과",
    "title": "비디오 분석 결과",
    "content": "# 비디오 분석 결과 비디오 분석 결과는 gRPC를 통해 스트리밍 방식으로 클라이언트에게 전송됩니다. protobuf 형식으로 작성되어 있습니다. - [비디오 분석결과 IDL 내용 바로가기 (click)](https://github.com/nextk-developer/protobuf/blob/master/vameta.proto) ",
    "url": "http://localhost:4000/docs/va_results/",
    "relUrl": "/docs/va_results/"
  }
}
